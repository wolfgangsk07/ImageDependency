import osimport jsonimport time  # 新增导入时间模块import argparseimport picklefrom tqdm import tqdmfrom torchvision import transformsimport torchvision.models as modelsimport numpy as npimport torchfrom torchvision.models import ResNet50_Weightsimport h5pyimport timmfrom PIL import Imageimport sysmodule_path_linux = "/backup/lgx/path_omics/"sys.path.insert(0, module_path_linux)from script.src.read_data import *from script.src.resnet import resnet50from pathlib import Pathdef main():    parser = argparse.ArgumentParser(description='Generate features from a given patch')    parser.add_argument('--svs', required=True,                        help='病理切片，例如：TCGA-GD-A3OP-01Z-00-DX1.A1D66E35-8E4D-4420-AD57-D45016D016D5.svs')    parser.add_argument('--seed', type=int, default=99, help='Seed for random generation')    args = parser.parse_args()        # 定义路径相关变量    wsi_id = Path(args.svs).stem.split('.')[0]  # 更稳健地获取文件名（无扩展名）    base_dir = Path("/ramfs/SVS")    # HDF5文件路径    patch_path = base_dir / "patches_hdf5" / wsi_id / f"{wsi_id}.hdf5"    feature_resnet = base_dir / "resnet" / wsi_id    feature_vit = base_dir / "vit" / wsi_id    completion_flag_resnet = feature_resnet / "complete_tile.txt"    completion_flag_vit = feature_vit / "complete_tile.txt"        # 种子设置    seed = args.seed    np.random.seed(seed)    torch.manual_seed(seed)    random.seed(seed)        # 设备检测    device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")    print(f"使用设备: {device}")        # 创建输出目录    feature_resnet.mkdir(parents=True, exist_ok=True)    feature_vit.mkdir(parents=True, exist_ok=True)        # 检查是否已完成处理    if completion_flag_resnet.exists() and completion_flag_vit.exists():        print(f"{wsi_id}: ViT和ResNet特征已提取完成")        sys.exit(0)        # 检查patch文件是否存在    if not patch_path.exists():        print(f"[错误] patch文件不存在: {patch_path}")        sys.exit(1)        # ------------------ 模型初始化 ------------------    # ResNet预处理及模型加载    transforms_val_resnet = torch.nn.Sequential(        transforms.ConvertImageDtype(torch.float),        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])    )    resnet_model = resnet50(pretrained=True).to(device)    resnet_model.eval()    # ViT预处理及模型加载    transforms_val_vit = transforms.Compose([        transforms.Resize(224),        transforms.ToTensor(),        transforms.Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225)),    ])    vit_model = timm.create_model(        "vit_large_patch16_224",        img_size=224,        patch_size=16,        init_values=1e-5,        num_classes=0,        dynamic_img_size=True    )    vit_model.load_state_dict(        torch.load(Path("/backup/lgx/path_omics_t/data/model/pytorch_model.bin"), map_location="cpu"),        strict=True    )    vit_model.to(device).eval()        # ------------------ 特征提取流程 ------------------        with h5py.File(patch_path, 'r') as f_read:        keys = list(f_read.keys())        features_tiles_resnet,features_tiles_vit = [], []        for key in tqdm(keys, desc=f"处理 {wsi_id}"):            image = f_read[key][:]            image_resnet = transforms_val_resnet(torch.from_numpy(image).permute(2,0,1)).to(device)            with torch.no_grad():                features_resnet = resnet_model.forward_extract(image_resnet[None,:])                features_tiles_resnet.append(features_resnet[0].detach().cpu().numpy())            image_vit = transforms_val_vit(Image.fromarray(image).convert("RGB")).to(device)            with torch.no_grad():                features_vit = vit_model(image_vit[None,:])                features_tiles_vit.append(features_vit[0].detach().cpu().numpy())                    features_tiles_vit = np.asarray(features_tiles_vit)    features_tiles_resnet = np.asarray(features_tiles_resnet)        n_tiles_vit = len(features_tiles_vit)    n_tiles_resnet = len(features_tiles_resnet)            # 保存ResNet特征    with h5py.File(feature_resnet / f"{wsi_id}_resnet.h5", "w") as f_out_resnet:        f_out_resnet.create_dataset("resnet", data = features_tiles_resnet)    completion_flag_resnet.write_text(f"Total resnet n patch = {n_tiles_resnet}")    # 保存ViT特征    with h5py.File(feature_vit / f"{wsi_id}_vit.h5", "w") as f_out_vit:        f_out_vit.create_dataset("vit", data = features_tiles_vit)    completion_flag_vit.write_text(f"Total vit n patch = {n_tiles_vit}")    try:        os.remove(patch_path)    except FileNotFoundError:        print(f"文件 {patch_path} 不存在，无需删除")     try:        os.remove(base_dir / "patches_hdf5" / wsi_id /"complete.txt")    except FileNotFoundError:        print(base_dir / "patches_hdf5" / wsi_id /"complete.txt" +"不存在，无需删除")     if __name__ == '__main__':    main()    